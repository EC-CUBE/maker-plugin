<?php
/*
 * This file is part of the Maker plugin
 *
 * Copyright (C) 2016 LOCKON CO.,LTD. All Rights Reserved.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Plugin\Maker\Repository;

use Doctrine\ORM\EntityRepository;
use Eccube\Common\Constant;
use Plugin\Maker\Entity\Maker;

/**
 * Maker
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MakerRepository extends EntityRepository
{
    /**
     * Up rank
     *
     * @param  Maker $Maker
     * @return bool
     */
    public function up(Maker $Maker)
    {
        $em = $this->getEntityManager();
        $em->getConnection()->beginTransaction();
        try {
            $rank = $Maker->getRank();

            $MakerUp = $this->createQueryBuilder('m')
                ->where('m.rank > :rank')
                ->setParameter('rank', $rank)
                ->orderBy('m.rank', 'ASC')
                ->setMaxResults(1)
                ->getQuery()
                ->getSingleResult();

            $Maker->setRank($MakerUp->getRank());
            $MakerUp->setRank($rank);

            $em->persist($Maker);
            $em->persist($MakerUp);

            $em->flush();
            $em->getConnection()->commit();
        } catch (\Exception $e) {
            $em->getConnection()->rollBack();

            return false;
        }

        return true;
    }

    /**
     * Down rank
     *
     * @param  Maker $Maker
     * @return bool
     */
    public function down(Maker $Maker)
    {
        $em = $this->getEntityManager();
        $em->getConnection()->beginTransaction();
        try {
            $rank = $Maker->getRank();

            $MakerDown = $this->createQueryBuilder('m')
                ->where('m.rank < :rank ')
                ->setParameter('rank', $rank)
                ->orderBy('m.rank', 'DESC')
                ->setMaxResults(1)
                ->getQuery()
                ->getSingleResult();

            $Maker->setRank($MakerDown->getRank());
            $MakerDown->setRank($rank);

            $em->persist($Maker);
            $em->persist($MakerDown);
            $em->flush();

            $em->getConnection()->commit();
        } catch (\Exception $e) {
            $em->getConnection()->rollBack();

            return false;
        }

        return true;
    }

    /**
     * Save method
     *
     * @param  Maker $Maker
     * @return bool
     */
    public function save(Maker $Maker)
    {
        $em = $this->getEntityManager();
        $em->getConnection()->beginTransaction();
        try {
            if (!$Maker->getId()) {
                $rank = $this->createQueryBuilder('m')
                    ->select('MAX(m.rank)')
                    ->getQuery()
                    ->getSingleScalarResult();
                if (!$rank) {
                    $rank = 0;
                }
                $Maker->setRank($rank + 1);
                $Maker->setDelFlg(Constant::DISABLED);

                $em->createQueryBuilder()
                    ->update('Plugin\Maker\Entity\Maker', 'm')
                    ->set('m.rank', 'm.rank + 1')
                    ->where('m.rank > :rank')
                    ->setParameter('rank', $rank)
                    ->getQuery()
                    ->execute();
            }

            $em->persist($Maker);
            $em->flush();

            $em->getConnection()->commit();
        } catch (\Exception $e) {
            $em->getConnection()->rollBack();

            return false;
        }

        return true;
    }

    /**
     * Delete maker (del flg)
     *
     * @param  Maker $Maker
     * @return bool
     */
    public function delete(Maker $Maker)
    {
        $em = $this->getEntityManager();
        $em->getConnection()->beginTransaction();
        try {
            $Maker->setDelFlg(Constant::ENABLED);
            $em->persist($Maker);
            $em->flush();

            $em->getConnection()->commit();
        } catch (\Exception $e) {
            $em->getConnection()->rollBack();

            return false;
        }

        return true;
    }
}
